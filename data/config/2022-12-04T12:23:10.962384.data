environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\bvani\\AppData\\Roaming', 'ATOM': 'c:\\Users\\bvani\\AppData\\Local\\atom\\bin', 'CHROME_CRASHPAD_PIPE_NAME': '\\\\.\\pipe\\crashpad_14488_JNFGUALNJEYJBQJG', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'OMEN', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\bvani', 'LOCALAPPDATA': 'C:\\Users\\bvani\\AppData\\Local', 'LOGONSERVER': '\\\\OMEN', 'NUMBER_OF_PROCESSORS': '24', 'OCULUSBASE': 'C:\\Program Files\\Oculus\\', 'ONEDRIVE': 'C:\\Users\\bvani\\OneDrive - AP Hogeschool Antwerpen', 'ONEDRIVECOMMERCIAL': 'C:\\Users\\bvani\\OneDrive - AP Hogeschool Antwerpen', 'ONEDRIVECONSUMER': 'C:\\Users\\bvani\\OneDrive', 'ONLINESERVICES': 'Online Services', 'ORIGINAL_XDG_CURRENT_DESKTOP': 'undefined', 'OS': 'Windows_NT', 'PATH': 'C:\\schoolwerk\\ehtroj\\venv\\Scripts;C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\Program Files\\Microsoft\\jdk-11.0.12.7-hotspot\\bin;C:\\Program Files\\Oculus\\Support\\oculus-runtime;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\bvani\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\bvani\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\bvani\\.dotnet\\tools;C:\\Users\\bvani\\AppData\\Local\\atom\\bin;C:\\Users\\bvani\\.dotnet\\tools;C:\\Program Files\\Azure Data Studio\\bin;C:\\Users\\bvani\\AppData\\Roaming\\npm;C:\\Users\\bvani\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\bvani\\AppData\\Local\\gitkraken\\bin;C:\\Users\\bvani\\.dotnet\\tools', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL', 'PLATFORMCODE': 'M5', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 151 Stepping 2, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9702', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Users\\bvani\\OneDrive\\Documenten\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\Tools\\PowerShell\\Modules\\', 'PUBLIC': 'C:\\Users\\Public', 'REGIONCODE': 'EMEA', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\bvani\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\bvani\\AppData\\Local\\Temp', 'USERDOMAIN': 'OMEN', 'USERDOMAIN_ROAMINGPROFILE': 'OMEN', 'USERNAME': 'bvani', 'USERPROFILE': 'C:\\Users\\bvani', 'VIRTUAL_ENV': 'C:\\schoolwerk\\ehtroj\\venv', 'VIRTUAL_ENV_PROMPT': 'venv', 'WINDIR': 'C:\\WINDOWS', '_OLD_VIRTUAL_PATH': 'C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\Program Files\\Microsoft\\jdk-11.0.12.7-hotspot\\bin;C:\\Program Files\\Oculus\\Support\\oculus-runtime;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\bvani\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\bvani\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\bvani\\.dotnet\\tools;C:\\Users\\bvani\\AppData\\Local\\atom\\bin;C:\\Users\\bvani\\.dotnet\\tools;C:\\Program Files\\Azure Data Studio\\bin;C:\\Users\\bvani\\AppData\\Roaming\\npm;C:\\Users\\bvani\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\bvani\\AppData\\Local\\gitkraken\\bin;C:\\Users\\bvani\\.dotnet\\tools', '__PSLOCKDOWNPOLICY': '0', 'TERM_PROGRAM': 'vscode', 'TERM_PROGRAM_VERSION': '1.73.1', 'LANG': 'en_GB.UTF-8', 'COLORTERM': 'truecolor', 'GIT_ASKPASS': 'c:\\Users\\bvani\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass.sh', 'VSCODE_GIT_ASKPASS_NODE': 'C:\\Users\\bvani\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '--ms-enable-electron-run-as-node', 'VSCODE_GIT_ASKPASS_MAIN': 'c:\\Users\\bvani\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass-main.js', 'VSCODE_GIT_IPC_HANDLE': '\\\\.\\pipe\\vscode-git-931bbd614c-sock', 'PYTHONUSERBASE': 'C:\\Users\\bvani\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages'})